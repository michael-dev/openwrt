From 0d33cc4c57de170e1ce84a2d29d058d314b1ab2d Mon Sep 17 00:00:00 2001
From: Michael Braun <michael-dev@fami-braun.de>
Date: Sun, 4 Aug 2019 14:45:20 +0200
Subject: [PATCH 4/6] nflog: add CT support

---
 include/netlink-private/types.h     |  2 +
 include/netlink/netfilter/ct.h      |  2 +
 include/netlink/netfilter/log_msg.h |  9 +++
 lib/netfilter/ct.c                  | 85 +++++++++++++++++++++--------
 lib/netfilter/ct_obj.c              |  5 +-
 lib/netfilter/log_msg.c             | 16 ++++++
 lib/netfilter/log_msg_obj.c         | 50 +++++++++++++++++
 7 files changed, 145 insertions(+), 24 deletions(-)

--- a/include/netlink-private/types.h
+++ b/include/netlink-private/types.h
@@ -1021,6 +1021,8 @@ struct nfnl_log_msg {
 	int			log_msg_hwheader_len;
 	uint16_t		log_msg_vlan_tag;
 	uint16_t		log_msg_vlan_proto;
+	uint32_t		log_msg_ct_info;
+	struct nfnl_ct *	log_msg_ct;
 };
 
 struct nfnl_queue {
--- a/include/netlink/netfilter/ct.h
+++ b/include/netlink/netfilter/ct.h
@@ -18,6 +18,7 @@
 #include <netlink/addr.h>
 #include <netlink/cache.h>
 #include <netlink/msg.h>
+#include <netlink/attr.h>
 
 #ifdef __cplusplus
 extern "C" {
@@ -37,6 +38,7 @@ extern int	nfnl_ct_alloc_cache(struct nl
 
 extern int	nfnlmsg_ct_group(struct nlmsghdr *);
 extern int	nfnlmsg_ct_parse(struct nlmsghdr *, struct nfnl_ct **);
+extern int	nfnlmsg_ct_parse_nested(struct nlattr *, struct nfnl_ct **);
 
 extern void	nfnl_ct_get(struct nfnl_ct *);
 extern void	nfnl_ct_put(struct nfnl_ct *);
--- a/include/netlink/netfilter/log_msg.h
+++ b/include/netlink/netfilter/log_msg.h
@@ -23,6 +23,7 @@ extern "C" {
 
 struct nlmsghdr;
 struct nfnl_log_msg;
+struct nfnl_ct;
 
 extern struct nl_object_ops log_msg_obj_ops;
 
@@ -112,6 +113,14 @@ extern uint16_t		nfnl_log_msg_get_vlan_i
 extern uint16_t		nfnl_log_msg_get_vlan_cfi(const struct nfnl_log_msg *);
 extern uint16_t		nfnl_log_msg_get_vlan_prio(const struct nfnl_log_msg *);
 
+extern void		nfnl_log_msg_set_ct_info(struct nfnl_log_msg *, uint32_t);
+extern int		nfnl_log_msg_test_ct_info(const struct nfnl_log_msg *);
+extern uint32_t		nfnl_log_msg_get_ct_info(const struct nfnl_log_msg *);
+
+extern void		nfnl_log_msg_set_ct(struct nfnl_log_msg *, struct nfnl_ct *);
+extern int		nfnl_log_msg_test_ct(const struct nfnl_log_msg *);
+extern struct nfnl_ct * nfnl_log_msg_get_ct(const struct nfnl_log_msg *);
+
 #ifdef __cplusplus
 }
 #endif
--- a/lib/netfilter/ct.c
+++ b/lib/netfilter/ct.c
@@ -315,40 +315,25 @@ static int ct_parse_timestamp(struct nfn
 	return 0;
 }
 
-int nfnlmsg_ct_parse(struct nlmsghdr *nlh, struct nfnl_ct **result)
+static int _nfnlmsg_ct_parse(struct nlattr **tb, struct nfnl_ct *ct)
 {
-	struct nfnl_ct *ct;
-	struct nlattr *tb[CTA_MAX+1];
 	int err;
 
-	ct = nfnl_ct_alloc();
-	if (!ct)
-		return -NLE_NOMEM;
-
-	ct->ce_msgtype = nlh->nlmsg_type;
-
-	err = nlmsg_parse(nlh, sizeof(struct nfgenmsg), tb, CTA_MAX,
-			  ct_policy);
-	if (err < 0)
-		goto errout;
-
-	nfnl_ct_set_family(ct, nfnlmsg_family(nlh));
-
 	if (tb[CTA_TUPLE_ORIG]) {
 		err = ct_parse_tuple(ct, 0, tb[CTA_TUPLE_ORIG]);
 		if (err < 0)
-			goto errout;
+			return err;
 	}
 	if (tb[CTA_TUPLE_REPLY]) {
 		err = ct_parse_tuple(ct, 1, tb[CTA_TUPLE_REPLY]);
 		if (err < 0)
-			goto errout;
+			return err;
 	}
 
 	if (tb[CTA_PROTOINFO]) {
 		err = ct_parse_protoinfo(ct, tb[CTA_PROTOINFO]);
 		if (err < 0)
-			goto errout;
+			return err;
 	}
 
 	if (tb[CTA_STATUS])
@@ -367,24 +352,80 @@ int nfnlmsg_ct_parse(struct nlmsghdr *nl
 	if (tb[CTA_COUNTERS_ORIG]) {
 		err = ct_parse_counters(ct, 0, tb[CTA_COUNTERS_ORIG]);
 		if (err < 0)
-			goto errout;
+			return err;
 	}
 
 	if (tb[CTA_COUNTERS_REPLY]) {
 		err = ct_parse_counters(ct, 1, tb[CTA_COUNTERS_REPLY]);
 		if (err < 0)
-			goto errout;
+			return err;
 	}
 
 	if (tb[CTA_TIMESTAMP]) {
 		err = ct_parse_timestamp(ct, tb[CTA_TIMESTAMP]);
 		if (err < 0)
-			goto errout;
+			return err;
 	}
 
+	return 0;
+}
+
+int nfnlmsg_ct_parse(struct nlmsghdr *nlh, struct nfnl_ct **result)
+{
+	struct nfnl_ct *ct;
+	struct nlattr *tb[CTA_MAX+1];
+	int err;
+
+	ct = nfnl_ct_alloc();
+	if (!ct)
+		return -NLE_NOMEM;
+
+	ct->ce_msgtype = nlh->nlmsg_type;
+
+	err = nlmsg_parse(nlh, sizeof(struct nfgenmsg), tb, CTA_MAX,
+			  ct_policy);
+	if (err < 0)
+		goto errout;
+
+	nfnl_ct_set_family(ct, nfnlmsg_family(nlh));
+
+	err = _nfnlmsg_ct_parse(tb, ct);
+	if (err < 0)
+		goto errout;
+
 	*result = ct;
 	return 0;
+errout:
+	nfnl_ct_put(ct);
+	return err;
+}
+
+int nfnlmsg_ct_parse_nested(struct nlattr *attr, struct nfnl_ct **result)
+{
+	struct nfnl_ct *ct;
+	struct nlattr *tb[CTA_MAX+1];
+	int err;
+
+	ct = nfnl_ct_alloc();
+	if (!ct)
+		return -NLE_NOMEM;
+
+	// msgtype not given for nested
+	//ct->ce_msgtype = nlh->nlmsg_type;
+
+	err = nla_parse_nested(tb, CTA_MAX, attr, ct_policy);
+	if (err < 0)
+		goto errout;
+
+	// family not known
+	//nfnl_ct_set_family(ct, nfnlmsg_family(nlh));
+
+	err = _nfnlmsg_ct_parse(tb, ct);
+	if (err < 0)
+		goto errout;
 
+	*result = ct;
+	return 0;
 errout:
 	nfnl_ct_put(ct);
 	return err;
--- a/lib/netfilter/ct_obj.c
+++ b/lib/netfilter/ct_obj.c
@@ -221,8 +221,9 @@ static void ct_dump_details(struct nl_ob
 	ct_dump_line(a, p);
 
 	nl_dump(p, "    id 0x%x ", ct->ct_id);
-	nl_dump_line(p, "family %s ",
-		nl_af2str(ct->ct_family, buf, sizeof(buf)));
+	if (ct->ce_mask & CT_ATTR_FAMILY)
+		nl_dump_line(p, "family %s ",
+			nl_af2str(ct->ct_family, buf, sizeof(buf)));
 
 	if (nfnl_ct_test_use(ct))
 		nl_dump(p, "refcnt %u ", nfnl_ct_get_use(ct));
--- a/lib/netfilter/log_msg.c
+++ b/lib/netfilter/log_msg.c
@@ -53,6 +53,8 @@ static struct nla_policy log_msg_policy[
 	[NFULA_HWTYPE]			= { .type = NLA_U16 },
 	[NFULA_HWLEN]			= { .type = NLA_U16 },
 	[NFULA_VLAN]			= { .type = NLA_NESTED },
+	[NFULA_CT]			= { .type = NLA_NESTED },
+	[NFULA_CT_INFO]			= { .type = NLA_U32 },
 };
 
 static struct nla_policy log_msg_vlan_policy[NFULA_VLAN_MAX+1] = {
@@ -198,6 +200,20 @@ int nfnlmsg_log_msg_parse(struct nlmsghd
 			goto errout;
 	}
 
+	attr = tb[NFULA_CT];
+	if (attr) {
+		struct nfnl_ct *ct = NULL;
+		err = nfnlmsg_ct_parse_nested(attr, &ct);
+		if (err < 0)
+			goto errout;
+		nfnl_log_msg_set_ct(msg, ct);
+		nfnl_ct_put(ct);
+	}
+
+	attr = tb[NFULA_CT_INFO];
+	if (attr)
+		nfnl_log_msg_set_ct_info(msg, ntohl(nla_get_u32(attr)));
+
 	*result = msg;
 	return 0;
 
--- a/lib/netfilter/log_msg_obj.c
+++ b/lib/netfilter/log_msg_obj.c
@@ -39,6 +39,8 @@
 #define LOG_MSG_ATTR_HWHEADER		(1UL << 18)
 #define LOG_MSG_ATTR_VLAN_PROTO		(1UL << 19)
 #define LOG_MSG_ATTR_VLAN_TAG		(1UL << 20)
+#define LOG_MSG_ATTR_CT_INFO		(1UL << 21)
+#define LOG_MSG_ATTR_CT			(1UL << 22)
 /** @endcond */
 
 static void log_msg_free_data(struct nl_object *c)
@@ -51,6 +53,8 @@ static void log_msg_free_data(struct nl_
 	free(msg->log_msg_payload);
 	free(msg->log_msg_prefix);
 	free(msg->log_msg_hwheader);
+	if (msg->log_msg_ct)
+		nfnl_ct_put(msg->log_msg_ct);
 }
 
 static int log_msg_clone(struct nl_object *_dst, struct nl_object *_src)
@@ -79,6 +83,14 @@ static int log_msg_clone(struct nl_objec
 			goto errout;
 	}
 
+	if (src->log_msg_ct) {
+		dst->log_msg_ct = (struct nfnl_ct *) nl_object_clone((struct nl_object *) src->log_msg_ct);
+		if (!dst->log_msg_ct) {
+			err = -NLE_NOMEM;
+			goto errout;
+		}
+	}
+
 	return 0;
 errout:
 	return err;
@@ -201,8 +213,14 @@ static void log_msg_dump(struct nl_objec
 		        (int) nfnl_log_msg_get_vlan_cfi(msg),
 		        (int) nfnl_log_msg_get_vlan_prio(msg));
 
+	if (msg->ce_mask & LOG_MSG_ATTR_CT_INFO)
+		nl_dump(p, "CTINFO=%u ", msg->log_msg_ct_info);
+
 	nl_dump(p, "\n");
 
+	if (msg->ce_mask & LOG_MSG_ATTR_CT)
+		ct_obj_ops.oo_dump[NL_DUMP_LINE]((struct nl_object *)msg->log_msg_ct, p);
+
 	if (link_cache)
 		nl_cache_put(link_cache);
 }
@@ -587,6 +605,38 @@ uint16_t nfnl_log_msg_get_vlan_prio(cons
 	return (msg->log_msg_vlan_tag & 0xe000 ) >> 13;
 }
 
+void nfnl_log_msg_set_ct_info(struct nfnl_log_msg *msg, uint32_t ct_info)
+{
+	msg->log_msg_ct_info = ct_info;
+	msg->ce_mask |= LOG_MSG_ATTR_CT_INFO;
+}
+
+int nfnl_log_msg_test_ct_info(const struct nfnl_log_msg *msg)
+{
+	return !!(msg->ce_mask & LOG_MSG_ATTR_CT_INFO);
+}
+
+uint32_t nfnl_log_msg_get_ct_info(const struct nfnl_log_msg *msg)
+{
+	return msg->log_msg_ct_info;
+}
+
+void nfnl_log_msg_set_ct(struct nfnl_log_msg *msg, struct nfnl_ct *ct)
+{
+	msg->log_msg_ct = (struct nfnl_ct *) nl_object_clone((struct nl_object *)ct);
+	msg->ce_mask |= LOG_MSG_ATTR_CT;
+}
+
+int nfnl_log_msg_test_ct(const struct nfnl_log_msg *msg)
+{
+	return !!(msg->ce_mask & LOG_MSG_ATTR_CT);
+}
+
+struct nfnl_ct *nfnl_log_msg_get_ct(const struct nfnl_log_msg *msg)
+{
+	return msg->log_msg_ct;
+}
+
 /** @} */
 
 struct nl_object_ops log_msg_obj_ops = {
